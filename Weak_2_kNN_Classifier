{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyN5AcXLAMFs8AKq8Oaz01V4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# kNN Classifier Tutorial\n","\n","Resource: https://www.kaggle.com/code/prashant111/knn-classifier-tutorial/notebook"],"metadata":{"id":"igE76hBxDl-o"}},{"cell_type":"code","source":["import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","import matplotlib.pyplot as plt # for data visualization purposes\n","import seaborn as sns # for data visualization"],"metadata":{"id":"OOYm6s4S5qYC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Data Upload and Analysis"],"metadata":{"id":"CCAcBuUPDTJi"}},{"cell_type":"code","source":["from google.colab import files\n","data = files.upload()"],"metadata":{"id":"qzlS0whPDe-x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data = '/content/breast-cancer-wisconsin.data.txt'\n","df = pd.read_csv(data, header=None)"],"metadata":{"id":"wqNJWZMc6NEA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.shape"],"metadata":{"id":"zffFVP2B6bpF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"id":"Zezw9qnO6x7s"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Add colomn names"],"metadata":{"id":"hBlOfinqut7b"}},{"cell_type":"code","source":["col_names = ['Id', 'Clump_thickness', 'Uniformity_Cell_Size', 'Uniformity_Cell_Shape', 'Marginal_Adhesion', \n","             'Single_Epithelial_Cell_Size', 'Bare_Nuclei', 'Bland_Chromatin', 'Normal_Nucleoli', 'Mitoses', 'Class']\n","\n","df.columns = col_names\n","\n","df.columns"],"metadata":{"id":"jD1fiVwz6x44"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"id":"IDXQN-VN6x2E"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Drop *Id* column"],"metadata":{"id":"DyA6SPFPuxoC"}},{"cell_type":"code","source":["df.drop('Id', axis=1, inplace=True)"],"metadata":{"id":"gEzJCAn06xzE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.info()"],"metadata":{"id":"RIj7qmuF6xwN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for var in df.columns:\n","    \n","    print(df[var].value_counts())"],"metadata":{"id":"DX_hKWhq6xtK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.dtypes"],"metadata":{"id":"1sSydL6p7Xs1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["If you check Bare_Nuclei column, it includes integer values. Change the type of the Bare_Nuclei column object to integer.   \n","\n","If your data include string, object or categorical data, you can use Label Encoder. For this data it is not necessary."],"metadata":{"id":"LamVnPchvEYB"}},{"cell_type":"code","source":["df['Bare_Nuclei'] = pd.to_numeric(df['Bare_Nuclei'], errors='coerce')"],"metadata":{"id":"yFIXLBVK6xqW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.dtypes"],"metadata":{"id":"eWn-xd5V6xnV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Check null values"],"metadata":{"id":"qDFRFvpZwMlC"}},{"cell_type":"code","source":["df.isnull().sum()\n","#df.isna().sum()"],"metadata":{"id":"t3EBQ-AR6xkf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"class variable and frequency distribution\")\n","df['Class'].value_counts()\n"],"metadata":{"id":"n_YLnwT08ABQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","print(\"class variable and frequency distribution frequency\")\n","df['Class'].value_counts()/np.float(len(df))\n"],"metadata":{"id":"Zq24LEtz8Z8K"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Data Visualization "],"metadata":{"id":"FQtV4-42C88t"}},{"cell_type":"code","source":["plt.rcParams['figure.figsize']=(30,25)\n","\n","df.plot(kind='hist', bins=10, subplots=True, layout=(5,2), sharex=False, sharey=False)\n","\n","plt.show()"],"metadata":{"id":"6zTMQjOX9C_e"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Correlation"],"metadata":{"id":"r-m53TkHCqW7"}},{"cell_type":"code","source":["correlation = df.corr()\n","correlation['Class'].sort_values(ascending=False)"],"metadata":{"id":"moHjlBWK9KIC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Correlation Heat Map**"],"metadata":{"id":"CYgOsgFN9Q8b"}},{"cell_type":"markdown","source":["The low correlation between the 2 features indicates that these 2 features are different from each other."],"metadata":{"id":"JwYl0T0PwYpj"}},{"cell_type":"code","source":["plt.figure(figsize=(10,8))\n","plt.title('Correlation of Attributes with Class variable')\n","a = sns.heatmap(correlation, square=True, annot=True, fmt='.2f', linecolor='white')\n","a.set_xticklabels(a.get_xticklabels(), rotation=90)\n","a.set_yticklabels(a.get_yticklabels(), rotation=30)           \n","plt.show()"],"metadata":{"id":"U_bZ0oJk9PNk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Declare feature vector and target variable"],"metadata":{"id":"ny2Llb7O9aqC"}},{"cell_type":"code","source":["X = df.drop(['Class'], axis=1)\n","\n","y = df['Class']"],"metadata":{"id":"LqzfyIGi9Z_0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Split data into separate training and test set"],"metadata":{"id":"95s6EPmZ9khN"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)"],"metadata":{"id":"hXYxtwl39Z8-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train.shape, X_test.shape"],"metadata":{"id":"wno9tud29Z58"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["impute missing values in X_train and X_test with respective column median in X_train"],"metadata":{"id":"Glzi4qgn96tB"}},{"cell_type":"code","source":["X_train.isnull().sum()"],"metadata":{"id":"oMZ8iCzl-HoX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_test.isnull().sum()"],"metadata":{"id":"ytCO7cSr-K_C"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for df1 in [X_train, X_test]:\n","    for col in X_train.columns:\n","        col_median=X_train[col].median()\n","        df1[col].fillna(col_median, inplace=True)     "],"metadata":{"id":"fZSap9JD9Z3J"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train.isnull().sum()"],"metadata":{"id":"_li8dHIj9Z0G"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_test.isnull().sum()"],"metadata":{"id":"Hpq-jjJl9ZxB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Feature Scaling"],"metadata":{"id":"aehB5cuN-vel"}},{"cell_type":"markdown","source":["Standardize features by removing the mean and scaling to unit variance."],"metadata":{"id":"LhHWh45gxGwC"}},{"cell_type":"code","source":["cols = X_train.columns"],"metadata":{"id":"dScHmr9a9ZuQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","\n","scaler = StandardScaler()\n","\n","X_train = scaler.fit_transform(X_train)\n","\n","X_test = scaler.transform(X_test)"],"metadata":{"id":"7kOp_JeN-xb6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train = pd.DataFrame(X_train, columns=[cols])\n","X_test = pd.DataFrame(X_test, columns=[cols])"],"metadata":{"id":"uyVtWvF2-xYp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train.head()"],"metadata":{"id":"zg6KhwRf-xV3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Fit K Neighbours Classifier to the training set "],"metadata":{"id":"iWTL1CFq_MfT"}},{"cell_type":"markdown","source":["Training your model"],"metadata":{"id":"dwXvOy_UxxgR"}},{"cell_type":"code","source":["# import KNeighbors ClaSSifier from sklearn\n","from sklearn.neighbors import KNeighborsClassifier\n","\n","# instantiate the model\n","knn_model = KNeighborsClassifier(n_neighbors=3)\n","\n","# fit the model to the training set\n","knn_model.fit(X_train, y_train)"],"metadata":{"id":"IYzCp2P7_Jn_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Test your data"],"metadata":{"id":"wD3fG-sUx09B"}},{"cell_type":"code","source":["y_pred = knn_model.predict(X_test)\n","\n","y_pred"],"metadata":{"id":"T8NNJuZb_alz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Check accuracy score"],"metadata":{"id":"oZt5VNNr_l0N"}},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score\n","#Test accuracy\n","print('Model accuracy score: {0:0.4f}'. format(accuracy_score(y_test, y_pred)))"],"metadata":{"id":"xNS20G9y_aga"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_pred_train = knn_model.predict(X_train)\n","print('Training-set accuracy score: {0:0.4f}'. format(accuracy_score(y_train, y_pred_train)))"],"metadata":{"id":"ficrGxR1_adq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Check accuracy of test and traning results for overfitting and underfitting problems."],"metadata":{"id":"5DMRuRysAQVS"}},{"cell_type":"code","source":["print('Training set score: {:.4f}'.format(knn_model.score(X_train, y_train)))\n","\n","print('Test set score: {:.4f}'.format(knn_model.score(X_test, y_test)))"],"metadata":{"id":"mJCnKXhl_aaj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Confusion Matrix"],"metadata":{"id":"jKFvYn0WBUW5"}},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","\n","cm = confusion_matrix(y_test, y_pred)\n","\n","print('Confusion matrix\\n\\n', cm)\n","\n","print('\\nTrue Positives(TP) = ', cm[0,0])\n","\n","print('\\nTrue Negatives(TN) = ', cm[1,1])\n","\n","print('\\nFalse Positives(FP) = ', cm[0,1])\n","\n","print('\\nFalse Negatives(FN) = ', cm[1,0])"],"metadata":{"id":"dxBypsSJ_aXv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(6,4))\n","\n","cm_matrix = pd.DataFrame(data=cm, columns=['Actual Positive:1', 'Actual Negative:0'], \n","                                 index=['Predict Positive:1', 'Predict Negative:0'])\n","\n","sns.heatmap(cm_matrix, annot=True, fmt='d', cmap='YlGnBu')"],"metadata":{"id":"TvR3rRAf_aU8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"PjWrFxlw_aR7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"k8VV4Yf8_aPF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"qE9xSb_8_aMR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"08BhJr_f_Zln"},"execution_count":null,"outputs":[]}]}